{"version":3,"sources":["theme.js","serviceWorkerRegistration.js","components/CurrencyRow.js","services/CurrencyConverter.js","actions/currenciesActions.js","components/HomeComponent.js","components/AllComponent.js","actions/index.js","Router.js","App.js","useDarkMode.js","reportWebVitals.js","reducers/currenciesReducer.js","actions/currencyActions.js","reducers/currencyReducer.js","reducers/viewReducer.js","reducers/index.js","store/index.js","index.js"],"names":["getTheme","darkState","palletType","mainPrimaryColor","grey","lightBlue","mainSecondaryColor","deepPurple","createMuiTheme","palette","type","primary","main","secondary","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","useStyles","makeStyles","theme","root","flexGrow","currencyText","display","flexDirection","justifyContent","currencyInput","width","CurrencyRow","currency","change","classes","Grid","container","spacing","className","item","sm","Typography","variant","name","id","TextField","label","InputLabelProps","shrink","value","rates","onChange","event","target","defaultCurrencies","instance","currencyList","this","getAllRates","getCurrencyList","symbols","getOfflineData","populate","data","endpoint","json","localForage","getItem","selectedCurrencies","storedCurrencies","setItem","Object","entries","forEach","c","push","selected","key","obj","toFixed","timestamp","date","Date","getDate","getMonth","getFullYear","getHours","getMinutes","slice","currencyRates","currencyId","amount","Number","arr","convert","from","to","base","e","freeze","GET_CURRENCIES","GET_CURRENCIES_SUCCESS","GET_CURRENCIES_FAILURE","GET_SELECTED_CURRENCIES","SET_SELECTED_CURRENCIES","CHANGE_RATE","GET_TABLE_DATA","getCurrenciesSuccess","currencies","payload","margin","connect","dispatch","useEffect","a","CurrencyConverter","getSelectedCurrencies","fetchSelectedCurrencies","isNaN","newSelected","changeRates","length","map","renderCurrencyRows","maxWidth","tableData","d","s","checked","fetchTableData","columns","title","field","options","sorting","selection","pageSize","onSelectionChange","rows","setSelectedCurrencies","setView","view","Views","fab","position","bottom","right","views","path","render","Fab","component","Link","color","renderFab","menuButton","marginRight","loading","hasErrors","useState","setDarkState","savedTheme","fetchMode","useDarkMode","themeToggler","newVersionAvailable","setNewVersionAvailable","waitingWorker","setWaitingWorker","openSnackbar","setOpenSnackbar","handleSnackbarClose","reason","cache","updateRates","onServiceWorkerUpdate","waiting","ThemeProvider","AppBar","Toolbar","IconButton","aria-label","Switch","CssBaseline","Router","renderView","Snackbar","open","onClose","message","action","Button","size","onClick","postMessage","fontSize","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","GET_CURRENCY","GET_CURRENCY_SUCCESS","GET_CURRENCY_FAILURE","rootReducer","combineReducers","actions","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.7d5b6e78.chunk.js","sourcesContent":["import {\r\n    grey,\r\n    lightBlue,\r\n    deepPurple\r\n  } from \"@material-ui/core/colors\";\r\nimport { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nexport function getTheme(darkState = false) {\r\n    const palletType = darkState ? \"dark\" : \"light\";\r\n    const mainPrimaryColor = darkState ? grey[900] : lightBlue[900];\r\n    const mainSecondaryColor = darkState ? '#616161' : deepPurple[500];\r\n    return createMuiTheme({\r\n      palette: {\r\n        type: palletType,\r\n        primary: {\r\n          main: mainPrimaryColor\r\n        },\r\n        secondary: {\r\n          main: mainSecondaryColor\r\n        }\r\n      }\r\n    });\r\n    \r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  currencyText: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n  },\r\n  currencyInput: {\r\n    width: \"100%\",\r\n  },\r\n}));\r\n\r\nfunction CurrencyRow({ currency, change }) {\r\n  const classes = useStyles();\r\n\r\n  function handleChange(event) {\r\n    change(currency.id, event.target.value);\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid className={classes.currencyText} item sm={3}>\r\n        <Typography variant=\"body1\">\r\n          {currency.name} ({currency.id})\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item sm={9}>\r\n        <TextField\r\n          id=\"outlined-number\"\r\n          className={classes.currencyInput}\r\n          label=\"Number\"\r\n          type=\"number\"\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          variant=\"outlined\"\r\n          value={currency.rates}\r\n          onChange={handleChange}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default CurrencyRow;\r\n","import localForage from 'localforage';\r\nimport {convert} from 'cashify';\r\n\r\nconst defaultCurrencies = [\r\n        {id: \"EUR\", name: \"Euro\", rates: \"1.00\"},\r\n        {id: \"GBP\", name: \"British Pound Sterling\", rates: \"0.1\"},\r\n        {id: \"USD\", name: \"United States Dollar\", rates: \"1.17\"}\r\n    ];\r\n\r\nclass CurrencyConverter {\r\n\r\n    async updateRates() {\r\n        let rates = null;\r\n        let currencyList = null;\r\n\r\n        try {\r\n            // get data and store into local storage\r\n            rates = await this.getAllRates();\r\n            currencyList = await this.getCurrencyList();\r\n            currencyList = currencyList.symbols;\r\n        } catch (e) {\r\n            // else fetch from local storage\r\n            console.log(e);\r\n            return await this.getOfflineData();\r\n        }\r\n        const data = await this.populate(currencyList, rates);\r\n        return data;\r\n    }\r\n\r\n    async getCurrencyList() {\r\n        const endpoint = `${process.env.REACT_APP_CURRENCY_API}/currencylist/`;\r\n        const response = await fetch(endpoint);\r\n        \r\n        return response.json();\r\n    }\r\n\r\n    async getAllRates() {\r\n        const endpoint = `${process.env.REACT_APP_CURRENCY_API}/rates/`;\r\n        const response = await fetch(endpoint);\r\n\r\n        return response.json();\r\n    }\r\n\r\n    async getOfflineData() {\r\n        return await localForage.getItem('data');\r\n    }\r\n\r\n    async getSelectedCurrencies(rates) {\r\n        let selectedCurrencies = [];\r\n\r\n        let storedCurrencies = await localForage.getItem('selectedCurrencies');\r\n        \r\n        if (!storedCurrencies) {\r\n            storedCurrencies = await localForage.setItem('selectedCurrencies', defaultCurrencies);\r\n        }\r\n\r\n        if (rates) { \r\n            Object.entries(rates).forEach((currency) => {\r\n                for (let c of storedCurrencies) {\r\n                    if (currency[1].id === c.id) {\r\n                        selectedCurrencies.push(currency[1]);\r\n                    }\r\n                }\r\n            });\r\n        \r\n            return selectedCurrencies;\r\n        }\r\n\r\n        return storedCurrencies;\r\n    }\r\n\r\n    async setSelectedCurrencies(selected) {\r\n        await localForage.setItem('selectedCurrencies', selected);\r\n    }\r\n\r\n    async populate(currencyList, rates) {\r\n        const data = [];\r\n\r\n        for(let key in currencyList) {\r\n            let obj = {};\r\n            obj.id = key;\r\n            obj.name = currencyList[key];\r\n            obj.rates = rates.rates[key].toFixed(2) || 0.0;\r\n            data.push(obj);\r\n        }\r\n\r\n        await localForage.setItem('data', data);\r\n        \r\n        return data;\r\n    }\r\n\r\n    getDate(timestamp) {\r\n        const date = new Date(timestamp*1000);\r\n        return `${date.getDate()}/${date.getMonth() + 1}/${date.getFullYear()} ${date.getHours()}:${('0'+date.getMinutes()).slice(-2)}`;\r\n    }\r\n\r\n    change(currencyRates, selectedCurrencies, currencyId, amount) {\r\n        const rates = {};\r\n\r\n        for (const currency of currencyRates) {\r\n            rates[currency.id] = Number(currency.rates);\r\n        }\r\n\r\n        const arr = []\r\n\r\n        for (let selected of selectedCurrencies) {\r\n            let obj = {};\r\n            obj.name = selected.name;\r\n            obj.id = selected.id;\r\n            try {\r\n                obj.rates = convert(Number(amount), { from: currencyId, to: selected.id, base: 'EUR', rates});\r\n\r\n                if (obj.id === currencyId) {\r\n                    obj.rates = amount;\r\n                } else {\r\n                    obj.rates = obj.rates.toFixed(2);\r\n                }\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n            arr.push(obj);\r\n        }\r\n\r\n        return arr;\r\n    }\r\n}\r\n\r\nconst instance = new CurrencyConverter();\r\nObject.freeze(instance);\r\n\r\nexport default instance;\r\n","import CurrencyConverter from '../services/CurrencyConverter';\r\n\r\nexport const GET_CURRENCIES = 'GET_CURRENCIES'\r\nexport const GET_CURRENCIES_SUCCESS = 'GET_CURRENCIES_SUCCESS'\r\nexport const GET_CURRENCIES_FAILURE = 'GET_CURRENCIES_FAILURE'\r\nexport const GET_SELECTED_CURRENCIES = 'GET_SELECTED_CURRENCIES'\r\nexport const SET_SELECTED_CURRENCIES = 'SET_SELECTED_CURRENCIES'\r\nexport const CHANGE_RATE = 'CHANGE_RATE'\r\nexport const GET_TABLE_DATA = 'GET_TABLE_DATA'\r\n\r\nexport const getCurrencies = () => ({ type: GET_CURRENCIES })\r\nexport const getCurrenciesSuccess = currencies => ({\r\n  type: GET_CURRENCIES_SUCCESS,\r\n  payload: currencies,\r\n})\r\nexport const getCurrenciesFailure = () => ({ type: GET_CURRENCIES_FAILURE })\r\n\r\nexport const getSelectedCurrencies = selectedCurrencies => ({\r\n  type: GET_SELECTED_CURRENCIES,\r\n  payload: selectedCurrencies,\r\n})\r\n\r\nexport const setSelectedCurrencies = selectedCurrencies => ({\r\n  type: SET_SELECTED_CURRENCIES,\r\n  payload: selectedCurrencies,\r\n})\r\n\r\nexport const getTableData = data => ({\r\n  type: GET_TABLE_DATA,\r\n  payload: data,\r\n})\r\n\r\nexport const changeRate = selectedCurrencies => ({\r\n  type: CHANGE_RATE,\r\n  payload: selectedCurrencies,\r\n})\r\n\r\nexport function fetchCurrencies() {\r\n  return async dispatch => {\r\n    dispatch(getCurrencies())\r\n\r\n    try {\r\n      const cache = await CurrencyConverter.getOfflineData();\r\n      dispatch(getCurrenciesSuccess(cache))\r\n      const data = await CurrencyConverter.updateRates();\r\n      dispatch(getCurrenciesSuccess(data))\r\n    } catch (error) {\r\n      dispatch(getCurrenciesFailure())\r\n    }\r\n  }\r\n}\r\n\r\nexport function fetchSelectedCurrencies(rates) {\r\n  return async dispatch => {\r\n    const data = await CurrencyConverter.getSelectedCurrencies(rates);\r\n    dispatch(getSelectedCurrencies(data))\r\n  }\r\n}\r\n\r\nexport function fetchTableData(rates) {\r\n  return async dispatch => {\r\n    const selected = await CurrencyConverter.getSelectedCurrencies(rates);\r\n    for(let d of rates) {\r\n      for(let s of selected) {\r\n          if(d.id === s.id) {\r\n              d.tableData = { checked: true }\r\n          } \r\n      }\r\n    }\r\n    dispatch(getTableData(rates))\r\n  }\r\n}\r\n\r\nexport function updateSelectedCurrencies(data) {\r\n  return async dispatch => {\r\n    await CurrencyConverter.setSelectedCurrencies(data);\r\n    dispatch(setSelectedCurrencies(data))\r\n  }\r\n}\r\n\r\n\r\nexport function changeRates(rates, selected, currencyId, amount) {\r\n  return async dispatch => {\r\n    const data = CurrencyConverter.change(rates, selected, currencyId, amount);\r\n    dispatch(changeRate(data))\r\n  }\r\n}","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CurrencyRow from \"./CurrencyRow\";\r\nimport {\r\n  fetchSelectedCurrencies,\r\n  changeRates,\r\n} from \"../actions/currenciesActions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    margin: 24,\r\n  },\r\n}));\r\n\r\nfunction Home({ dispatch, selected, rates }) {\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchSelectedCurrencies(rates));\r\n  }, [dispatch, rates]);\r\n\r\n  const renderCurrencyRows = () => {\r\n    if (typeof selected !== \"object\" || selected.length === 0) return;\r\n\r\n    return selected.map((currency) => (\r\n      <CurrencyRow\r\n        key={currency.id}\r\n        currency={currency}\r\n        change={change}\r\n      ></CurrencyRow>\r\n    ));\r\n  };\r\n\r\n  const change = (currencyId, amount) => {\r\n    if (isNaN(amount)) {\r\n      return;\r\n    }\r\n\r\n    const newSelected = [...selected];\r\n    dispatch(changeRates(rates, newSelected, currencyId, amount));\r\n  };\r\n\r\n  return <div className={classes.root}>{renderCurrencyRows()}</div>;\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  selected: state.currencies.selectedCurrencies,\r\n  rates: state.currencies.currencies,\r\n});\r\n\r\nexport default connect(mapStateToProps)(Home);\r\n","import React, { useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MaterialTable from \"material-table\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  fetchTableData,\r\n  updateSelectedCurrencies,\r\n} from \"../actions/currenciesActions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    margin: 24,\r\n    maxWidth: \"100%\",\r\n  },\r\n}));\r\n\r\nfunction All({ dispatch, tableData, rates }) {\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTableData(rates));\r\n  }, [dispatch, rates]);\r\n\r\n  const renderTable = () => {\r\n    return (\r\n      <MaterialTable\r\n        columns={[\r\n          { title: \"Name\", field: \"name\" },\r\n          { title: \"ID\", field: \"id\" },\r\n          { title: \"Rate\", field: \"rates\", type: \"numeric\" },\r\n        ]}\r\n        data={tableData}\r\n        title=\"\"\r\n        options={{\r\n          sorting: true,\r\n          selection: true,\r\n          pageSize: 20,\r\n        }}\r\n        onSelectionChange={(rows) => dispatch(updateSelectedCurrencies(rows))}\r\n      />\r\n    );\r\n  };\r\n\r\n  return <div className={classes.root}>{renderTable()}</div>;\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  tableData: state.currencies.tableData,\r\n  rates: state.currencies.currencies,\r\n});\r\n\r\nexport default connect(mapStateToProps)(All);\r\n","export const setView = view => ({\r\n  type: 'SET_VIEW',\r\n  view\r\n})\r\n\r\nexport const Views = {\r\n  HOME: 'HOME',\r\n  ALL: 'ALL',\r\n  STATS: 'STATS'\r\n}\r\n  ","import React from \"react\";\r\nimport Home from \"./components/HomeComponent\";\r\nimport All from \"./components/AllComponent\";\r\nimport { setView, Views } from \"./actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Close from \"@material-ui/icons/Close\";\r\nimport Add from \"@material-ui/icons/Add\";\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Redirect,\r\n  Switch,\r\n  Link,\r\n} from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  fab: {\r\n    position: \"absolute\",\r\n    bottom: theme.spacing(2),\r\n    right: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nfunction AppRouter({ dispatch, view }) {\r\n  const classes = useStyles();\r\n\r\n  const renderFab = (view) => {\r\n    switch (view) {\r\n      case Views.HOME:\r\n        return (\r\n          <Fab\r\n            component={Link}\r\n            to=\"/all\"\r\n            color=\"primary\"\r\n            className={classes.fab}\r\n          >\r\n            <Add />\r\n          </Fab>\r\n        );\r\n      case Views.ALL:\r\n        return (\r\n          <Fab component={Link} to=\"/\" color=\"primary\" className={classes.fab}>\r\n            <Close />\r\n          </Fab>\r\n        );\r\n      case Views.STATS:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route\r\n          path=\"/all\"\r\n          render={() => {\r\n            dispatch(setView(Views.ALL));\r\n            return <All />;\r\n          }}\r\n        />\r\n        <Route\r\n          path=\"/\"\r\n          render={() => {\r\n            dispatch(setView(Views.HOME));\r\n            return <Home />;\r\n          }}\r\n        />\r\n        <Redirect to=\"/\" />\r\n      </Switch>\r\n      {renderFab(view)}\r\n    </Router>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  view: state.views.view,\r\n});\r\n\r\nexport default connect(mapStateToProps)(AppRouter);\r\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport Close from \"@material-ui/icons/Close\";\nimport Assessment from \"@material-ui/icons/Assessment\";\nimport { getTheme } from \"./theme\";\nimport Button from \"@material-ui/core/Button\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport { ThemeProvider, makeStyles } from \"@material-ui/core/styles\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { useDarkMode } from \"./useDarkMode\";\nimport * as serviceWorker from \"./serviceWorkerRegistration\";\nimport Router from \"./Router\";\nimport { fetchCurrencies } from \"./actions/currenciesActions\";\nimport { connect } from \"react-redux\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  fab: {\n    position: \"relative\",\n    bottom: theme.spacing(2),\n    right: theme.spacing(2),\n  },\n}));\n\nfunction App({ dispatch, loading, rates, hasErrors, view }) {\n  const classes = useStyles();\n  const [darkState, themeToggler] = useDarkMode();\n  const [newVersionAvailable, setNewVersionAvailable] = useState(false);\n  const [waitingWorker, setWaitingWorker] = useState({});\n  const [openSnackbar, setOpenSnackbar] = useState(false);\n\n  const handleSnackbarClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n\n    setOpenSnackbar(false);\n  };\n\n  useEffect(() => {\n    dispatch(fetchCurrencies());\n\n    if (process.env.NODE_ENV === \"production\") {\n      serviceWorker.register({ onUpdate: onServiceWorkerUpdate });\n    }\n\n    if (newVersionAvailable)\n      //show snackbar with refresh button\n      setOpenSnackbar(true);\n  }, [dispatch, newVersionAvailable]);\n\n  const onServiceWorkerUpdate = (registration) => {\n    setNewVersionAvailable(true);\n    setWaitingWorker(registration && registration.waiting);\n  };\n\n  const updateServiceWorker = (event, reason) => {\n    waitingWorker && waitingWorker.postMessage({ type: \"SKIP_WAITING\" });\n    setNewVersionAvailable(false);\n    window.location.reload();\n  };\n\n  const renderView = () => {\n    if (loading || hasErrors || !rates || rates.length === 0) return;\n\n    return <Router />;\n  };\n\n  return (\n    <ThemeProvider theme={getTheme(darkState)}>\n      <div className=\"App\">\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\" className={classes.title}>\n              Currency Conveter\n            </Typography>\n            <IconButton color=\"inherit\" aria-label=\"statistics\">\n              <Assessment />\n            </IconButton>\n            <Switch checked={darkState || false} onChange={themeToggler} />\n          </Toolbar>\n        </AppBar>\n        <CssBaseline />\n\n        {renderView()}\n        <Snackbar\n          open={openSnackbar}\n          onClose={handleSnackbarClose}\n          message=\"A new version was released\"\n          action={\n            <Fragment>\n              <Button\n                color=\"secondary\"\n                size=\"small\"\n                onClick={updateServiceWorker}\n              >\n                REFRESH\n              </Button>\n              <IconButton\n                size=\"small\"\n                aria-label=\"close\"\n                color=\"inherit\"\n                onClick={handleSnackbarClose}\n              >\n                <Close fontSize=\"small\" />\n              </IconButton>\n            </Fragment>\n          }\n        />\n      </div>\n    </ThemeProvider>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.currencies.loading,\n  rates: state.currencies.currencies,\n  hasErrors: state.currencies.hasErrors,\n  view: state.views.view,\n});\n\nexport default connect(mapStateToProps)(App);\n","import { useEffect, useState } from 'react';\r\nimport localForage from 'localforage';\r\n\r\nexport const useDarkMode = () => {\r\n    const [darkState, setDarkState] = useState(false);\r\n\r\n    const themeToggler = () => {\r\n        localForage.setItem('darkMode', !darkState)\r\n        setDarkState(!darkState);\r\n    };\r\n\r\n    useEffect(() => {\r\n        async function fetchMode() {\r\n            const savedTheme = await localForage.getItem('darkMode');\r\n            setDarkState(savedTheme);\r\n        }\r\n        fetchMode();\r\n    }, []);\r\n\r\n    return [darkState, themeToggler]\r\n};","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as actions from '../actions/currenciesActions'\r\n\r\nexport const initialState = {\r\n  loading: false,\r\n  hasErrors: false,\r\n  currencies: [],\r\n  selectedCurrencies: [],\r\n  tableData: []\r\n}\r\n\r\nexport default function currenciesReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case actions.GET_CURRENCIES:\r\n      return { ...state, loading: true }\r\n    case actions.GET_CURRENCIES_SUCCESS:\r\n      return { ...state, currencies: action.payload, loading: false, hasErrors: false }\r\n    case actions.GET_CURRENCIES_FAILURE:\r\n      return { ...state, loading: false, hasErrors: true }\r\n    case actions.GET_SELECTED_CURRENCIES:\r\n      return { ...state, selectedCurrencies: action.payload }\r\n    case actions.SET_SELECTED_CURRENCIES:\r\n      return { ...state, selectedCurrencies: action.payload }\r\n    case actions.CHANGE_RATE:\r\n      return { ...state, selectedCurrencies: action.payload }\r\n    case actions.GET_TABLE_DATA:\r\n      return { ...state, tableData: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}","export const GET_CURRENCY = 'GET CurrencyS'\r\nexport const GET_CURRENCY_SUCCESS = 'GET_Currency_SUCCESS'\r\nexport const GET_CURRENCY_FAILURE = 'GET_Currency_FAILURE'\r\n\r\nexport const getCurrency = () => ({ type: GET_CURRENCY })\r\nexport const getCurrencySuccess = Currency => ({\r\n  type: GET_CURRENCY_SUCCESS,\r\n  payload: Currency,\r\n})\r\nexport const getCurrencyFailure = () => ({ type: GET_CURRENCY_FAILURE })\r\n\r\nexport function fetchCurrency(id) {\r\n  return async dispatch => {\r\n    dispatch(getCurrency())\r\n\r\n    try {\r\n      const response = await fetch(\r\n        // `https://jsonplaceholder.typicode.com/Currencys/${id}`\r\n      )\r\n      const data = await response.json()\r\n\r\n      dispatch(getCurrencySuccess(data))\r\n    } catch (error) {\r\n      dispatch(getCurrencyFailure())\r\n    }\r\n  }\r\n}\r\n","import * as actions from '../actions/currencyActions'\r\n\r\nexport const initialState = {\r\n  loading: false,\r\n  hasErrors: false,\r\n  currency: {},\r\n}\r\n\r\nexport default function currencyReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case actions.GET_CURRENCY:\r\n      return { ...state, loading: true }\r\n    case actions.GET_CURRENCY_SUCCESS:\r\n      return { ...state, currency: action.payload, loading: false, hasErrors: false }\r\n    case actions.GET_CURRENCY_FAILURE:\r\n      return { ...state, loading: false, hasErrors: true }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { Views } from '../actions'\r\n\r\nexport const initialState = {\r\n  view: Views.HOME\r\n}\r\n\r\nexport default function viewReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'SET_VIEW':\r\n      return { ...state, view: action.view }\r\n    default:\r\n      return state\r\n  }\r\n}","import { combineReducers } from 'redux';\r\n\r\nimport currenciesReducer from './currenciesReducer'\r\nimport currencyReducer from './currencyReducer';\r\nimport viewReducer from './viewReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  currency: currencyReducer,\r\n  currencies: currenciesReducer,\r\n  views: viewReducer\r\n})\r\n\r\nexport default rootReducer\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"../reducers/index\";\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from \"./store/index\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}